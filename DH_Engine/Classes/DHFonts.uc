//==============================================================================
// This file was automatically generated by the localization tool.
// Do not edit this file directly.
// To regenerate this file, run ./tools/localization/generate_fonts.bat
//==============================================================================

class DHFonts extends Object
    abstract;

struct FontStyleItem {
    var int FontIndex;
    var int Resolution;
};

var string FontNames[31];
var Font Fonts[31];
var FontStyleItem DHConsoleFontItems[5];
var FontStyleItem DHConsoleFontDSItems[5];
var FontStyleItem DHButtonFontItems[3];
var FontStyleItem DHButtonFontDSItems[3];
var FontStyleItem DHHugeButtonFontItems[3];
var FontStyleItem DHLargeFontItems[3];
var FontStyleItem DHLargeFontDSItems[3];
var FontStyleItem DHMenuFontItems[3];
var FontStyleItem DHMenuFontDSItems[3];
var FontStyleItem DHSmallFontItems[3];
var FontStyleItem DHSmallFontDSItems[3];
var FontStyleItem DHTinyFontItems[3];

static function Font GetFontByIndex(int i) {
    if (default.Fonts[i] == none) {
        default.Fonts[i] = Font(DynamicLoadObject(default.FontNames[i], class'Font'));
        if (default.Fonts[i] == none) {
            Warn("Could not dynamically load" @ default.FontNames[i]);
        }
    }
    return default.Fonts[i];
}

static function int GetEffectiveResolution(int ResX, int ResY)
{
    const BASELINE_ASPECT_RATIO = 1.7777777777777777777777777777778;    // 16:9 aspect ratio
    return ResY * FMax(1.0, ((float(ResX) / float(ResY)) / BASELINE_ASPECT_RATIO));
}

static function Font GetDHConsoleFontByIndex(int i) {
    return GetFontByIndex(default.DHConsoleFontItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHConsoleFontByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHConsoleFontItems); i++) {
        if (ResY >= default.DHConsoleFontItems[i].Resolution) {
            return GetDHConsoleFontByIndex(i);
        }
    }
    return GetDHConsoleFontByIndex(arraycount(default.DHConsoleFontItems) - 1);
}

static function Font GetDHConsoleFontDSByIndex(int i) {
    return GetFontByIndex(default.DHConsoleFontDSItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHConsoleFontDSByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHConsoleFontDSItems); i++) {
        if (ResY >= default.DHConsoleFontDSItems[i].Resolution) {
            return GetDHConsoleFontDSByIndex(i);
        }
    }
    return GetDHConsoleFontDSByIndex(arraycount(default.DHConsoleFontDSItems) - 1);
}

static function Font GetDHButtonFontByIndex(int i) {
    return GetFontByIndex(default.DHButtonFontItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHButtonFontByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHButtonFontItems); i++) {
        if (ResY >= default.DHButtonFontItems[i].Resolution) {
            return GetDHButtonFontByIndex(i);
        }
    }
    return GetDHButtonFontByIndex(arraycount(default.DHButtonFontItems) - 1);
}

static function Font GetDHButtonFontDSByIndex(int i) {
    return GetFontByIndex(default.DHButtonFontDSItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHButtonFontDSByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHButtonFontDSItems); i++) {
        if (ResY >= default.DHButtonFontDSItems[i].Resolution) {
            return GetDHButtonFontDSByIndex(i);
        }
    }
    return GetDHButtonFontDSByIndex(arraycount(default.DHButtonFontDSItems) - 1);
}

static function Font GetDHHugeButtonFontByIndex(int i) {
    return GetFontByIndex(default.DHHugeButtonFontItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHHugeButtonFontByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHHugeButtonFontItems); i++) {
        if (ResY >= default.DHHugeButtonFontItems[i].Resolution) {
            return GetDHHugeButtonFontByIndex(i);
        }
    }
    return GetDHHugeButtonFontByIndex(arraycount(default.DHHugeButtonFontItems) - 1);
}

static function Font GetDHLargeFontByIndex(int i) {
    return GetFontByIndex(default.DHLargeFontItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHLargeFontByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHLargeFontItems); i++) {
        if (ResY >= default.DHLargeFontItems[i].Resolution) {
            return GetDHLargeFontByIndex(i);
        }
    }
    return GetDHLargeFontByIndex(arraycount(default.DHLargeFontItems) - 1);
}

static function Font GetDHLargeFontDSByIndex(int i) {
    return GetFontByIndex(default.DHLargeFontDSItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHLargeFontDSByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHLargeFontDSItems); i++) {
        if (ResY >= default.DHLargeFontDSItems[i].Resolution) {
            return GetDHLargeFontDSByIndex(i);
        }
    }
    return GetDHLargeFontDSByIndex(arraycount(default.DHLargeFontDSItems) - 1);
}

static function Font GetDHMenuFontByIndex(int i) {
    return GetFontByIndex(default.DHMenuFontItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHMenuFontByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHMenuFontItems); i++) {
        if (ResY >= default.DHMenuFontItems[i].Resolution) {
            return GetDHMenuFontByIndex(i);
        }
    }
    return GetDHMenuFontByIndex(arraycount(default.DHMenuFontItems) - 1);
}

static function Font GetDHMenuFontDSByIndex(int i) {
    return GetFontByIndex(default.DHMenuFontDSItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHMenuFontDSByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHMenuFontDSItems); i++) {
        if (ResY >= default.DHMenuFontDSItems[i].Resolution) {
            return GetDHMenuFontDSByIndex(i);
        }
    }
    return GetDHMenuFontDSByIndex(arraycount(default.DHMenuFontDSItems) - 1);
}

static function Font GetDHSmallFontByIndex(int i) {
    return GetFontByIndex(default.DHSmallFontItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHSmallFontByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHSmallFontItems); i++) {
        if (ResY >= default.DHSmallFontItems[i].Resolution) {
            return GetDHSmallFontByIndex(i);
        }
    }
    return GetDHSmallFontByIndex(arraycount(default.DHSmallFontItems) - 1);
}

static function Font GetDHSmallFontDSByIndex(int i) {
    return GetFontByIndex(default.DHSmallFontDSItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHSmallFontDSByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHSmallFontDSItems); i++) {
        if (ResY >= default.DHSmallFontDSItems[i].Resolution) {
            return GetDHSmallFontDSByIndex(i);
        }
    }
    return GetDHSmallFontDSByIndex(arraycount(default.DHSmallFontDSItems) - 1);
}

static function Font GetDHTinyFontByIndex(int i) {
    return GetFontByIndex(default.DHTinyFontItems[i].FontIndex);
}

// Load a font by the nearest target resolution
static function Font GetDHTinyFontByResolution(int ResX, int ResY) {
    local int i;
    ResY = GetEffectiveResolution(ResX, ResY);
    for (i = 0; i < arraycount(default.DHTinyFontItems); i++) {
        if (ResY >= default.DHTinyFontItems[i].Resolution) {
            return GetDHTinyFontByIndex(i);
        }
    }
    return GetDHTinyFontByIndex(arraycount(default.DHTinyFontItems) - 1);
}

defaultproperties
{
    FontNames(0)="DHFonts.InterA18"
    FontNames(1)="DHFonts.InterA14"
    FontNames(2)="DHFonts.InterA12"
    FontNames(3)="DHFonts.InterA10"
    FontNames(4)="DHFonts.InterAD18"
    FontNames(5)="DHFonts.InterAD14"
    FontNames(6)="DHFonts.InterAD12"
    FontNames(7)="DHFonts.InterAD10"
    FontNames(8)="DHFonts.SofiaSansCondensedAW100026"
    FontNames(9)="DHFonts.SofiaSansCondensedAW100020"
    FontNames(10)="DHFonts.SofiaSansCondensedAW100016"
    FontNames(11)="DHFonts.SofiaSansCondensedADW100026"
    FontNames(12)="DHFonts.SofiaSansCondensedADW100020"
    FontNames(13)="DHFonts.SofiaSansCondensedADW100016"
    FontNames(14)="DHFonts.SofiaSansCondensedA42"
    FontNames(15)="DHFonts.SofiaSansCondensedA32"
    FontNames(16)="DHFonts.SofiaSansCondensedA26"
    FontNames(17)="DHFonts.ArialA26"
    FontNames(18)="DHFonts.ArialA20"
    FontNames(19)="DHFonts.ArialA16"
    FontNames(20)="DHFonts.ArialAD26"
    FontNames(21)="DHFonts.ArialAD20"
    FontNames(22)="DHFonts.ArialAD16"
    FontNames(23)="DHFonts.SofiaSansCondensedAW100028"
    FontNames(24)="DHFonts.SofiaSansCondensedAW100022"
    FontNames(25)="DHFonts.SofiaSansCondensedAW100018"
    FontNames(26)="DHFonts.SofiaSansCondensedADW100028"
    FontNames(27)="DHFonts.SofiaSansCondensedADW100022"
    FontNames(28)="DHFonts.SofiaSansCondensedADW100018"
    FontNames(29)="DHFonts.InterA8"
    FontNames(30)="DHFonts.InterA6"
    DHConsoleFontItems(0)=(FontIndex=0,Resolution=1440)
    DHConsoleFontItems(1)=(FontIndex=1,Resolution=1080)
    DHConsoleFontItems(2)=(FontIndex=1,Resolution=1024)
    DHConsoleFontItems(3)=(FontIndex=2,Resolution=900)
    DHConsoleFontItems(4)=(FontIndex=3,Resolution=768)
    DHConsoleFontDSItems(0)=(FontIndex=4,Resolution=1440)
    DHConsoleFontDSItems(1)=(FontIndex=5,Resolution=1080)
    DHConsoleFontDSItems(2)=(FontIndex=5,Resolution=1024)
    DHConsoleFontDSItems(3)=(FontIndex=6,Resolution=900)
    DHConsoleFontDSItems(4)=(FontIndex=7,Resolution=768)
    DHButtonFontItems(0)=(FontIndex=8,Resolution=1400)
    DHButtonFontItems(1)=(FontIndex=9,Resolution=1080)
    DHButtonFontItems(2)=(FontIndex=10,Resolution=900)
    DHButtonFontDSItems(0)=(FontIndex=11,Resolution=1400)
    DHButtonFontDSItems(1)=(FontIndex=12,Resolution=1080)
    DHButtonFontDSItems(2)=(FontIndex=13,Resolution=900)
    DHHugeButtonFontItems(0)=(FontIndex=14,Resolution=1400)
    DHHugeButtonFontItems(1)=(FontIndex=15,Resolution=1080)
    DHHugeButtonFontItems(2)=(FontIndex=16,Resolution=900)
    DHLargeFontItems(0)=(FontIndex=17,Resolution=1400)
    DHLargeFontItems(1)=(FontIndex=18,Resolution=1080)
    DHLargeFontItems(2)=(FontIndex=19,Resolution=900)
    DHLargeFontDSItems(0)=(FontIndex=20,Resolution=1400)
    DHLargeFontDSItems(1)=(FontIndex=21,Resolution=1080)
    DHLargeFontDSItems(2)=(FontIndex=22,Resolution=900)
    DHMenuFontItems(0)=(FontIndex=23,Resolution=1400)
    DHMenuFontItems(1)=(FontIndex=24,Resolution=1080)
    DHMenuFontItems(2)=(FontIndex=25,Resolution=900)
    DHMenuFontDSItems(0)=(FontIndex=26,Resolution=1400)
    DHMenuFontDSItems(1)=(FontIndex=27,Resolution=1080)
    DHMenuFontDSItems(2)=(FontIndex=28,Resolution=900)
    DHSmallFontItems(0)=(FontIndex=0,Resolution=1400)
    DHSmallFontItems(1)=(FontIndex=1,Resolution=1080)
    DHSmallFontItems(2)=(FontIndex=2,Resolution=900)
    DHSmallFontDSItems(0)=(FontIndex=4,Resolution=1400)
    DHSmallFontDSItems(1)=(FontIndex=5,Resolution=1080)
    DHSmallFontDSItems(2)=(FontIndex=6,Resolution=900)
    DHTinyFontItems(0)=(FontIndex=3,Resolution=1400)
    DHTinyFontItems(1)=(FontIndex=29,Resolution=1080)
    DHTinyFontItems(2)=(FontIndex=30,Resolution=900)
}
